[tool.poetry]
name = "langgraph-checkpoint-redis"
version = "0.1.1"
description = "Redis implementation of the LangGraph agent checkpoint saver and store."
authors = ["Redis Inc. <applied.ai@redis.com>", "Brian Sam-Bodden <bsb@redis.io>"]
license = "MIT"
readme = "README.md"
repository = "https://www.github.com/redis-developer/langgraph-redis"
keywords = ["ai", "redis", "redis-client", "vector-database", "agents", "langgraph", "langchain"]
classifiers = [
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
]
packages = [{ include = "langgraph" }]

[tool.poetry.dependencies]
python = ">=3.9,<3.14"
langgraph-checkpoint = ">=2.0.21,<3.0.0"
redisvl = ">=0.5.1,<1.0.0"
redis = "^6.2.0"
orjson = "^3.9.0"
tomli = { version = "^2.0.1", python = "<3.11" }

[tool.poetry.group.dev.dependencies]
langgraph = ">=0.3.0"
black = "^25.1.0"
codespell = "^2.4.1"
pytest = "^8.4.1"
anyio = "^4.10.0"
pytest-asyncio = "^1.1.0"
pytest-xdist = { extras = ["psutil"], version = "^3.8.0" }
pytest-mock = "^3.14.1"
mypy = ">=1.11.0,<2"
aioconsole = "^0.8.1"
langchain-openai = "^0.3.30"
testcontainers = "^4.12.0"
isort = "^6.0.1"
cryptography = { version = ">=44.0.1", markers = "python_version > '3.9.1'" }
coverage = "^7.10.3"
pytest-cov = "^6.2.1"
vulture = "^2.14"
pympler = "^1.1"
aiofiles = "^24.1.0"

[tool.pytest.ini_options]
# --strict-markers will raise errors on unknown marks.
# https://docs.pytest.org/en/7.1.x/how-to/mark.html#raising-errors-on-unknown-marks
#
# https://docs.pytest.org/en/7.1.x/reference/reference.html
# --strict-config       any warnings encountered while parsing the `pytest`
#                       section of the configuration file raise errors.
addopts = "--strict-markers --strict-config --durations=5 -vv"
asyncio_mode = "auto"

[tool.poetry.scripts]
format = "scripts:format"
check-format = "scripts:check_format"
sort-imports = "scripts:sort_imports"
check-sort-imports = "scripts:check_sort_imports"
check-lint = "scripts:check_lint"
check-mypy = "scripts:check_mypy"
test = "scripts:test"
test-verbose = "scripts:test_verbose"
test-coverage = "scripts:test_coverage"
coverage-report = "scripts:coverage_report"
coverage-html = "scripts:coverage_html"
find-dead-code = "scripts:find_dead_code"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
target-version = ['py39', 'py310', 'py311', 'py312', 'py313']
exclude = '''
(
  | \.egg
  | \.git
  | \.hg
  | \.mypy_cache
  | \.nox
  | \.tox
  | \.venv
  | _build
  | build
  | dist
  | setup.py
)
'''

[tool.mypy]
# https://mypy.readthedocs.io/en/stable/config_file.html
disallow_untyped_defs = true
explicit_package_bases = true
warn_no_return = false
warn_unused_ignores = true
warn_redundant_casts = true
allow_redefinition = true
ignore_missing_imports = true
disable_error_code = "typeddict-item, return-value, union-attr, operator, assignment"

[tool.coverage.run]
source = ["langgraph"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/scripts.py",
    "*/examples/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
skip_covered = false
skip_empty = true

[tool.coverage.html]
directory = "htmlcov"

[tool.vulture]
paths = ["langgraph"]
exclude = ["*test*", "*example*"]
min_confidence = 80
sort_by_size = true
